#+TITLE: syedra: A Systems Design Framework
#+AUTHOR: Haldun Komsuoglu

*syedra* framework is a tool kit to implement control and
data processing systems. It is named after the ancient city
of [[https://syedra.org][Syedra]] located in Alanya, Turkey whose city plan of
concentric circles climbing up a hill top resembles a
heirachy of abstraction layers.

See [[Documentation][Documentation]] for more details on the code use.

See [[file:release.org][Releases]] for a full list of tagged stable versions.


* Branches

  - *main*: most recent stable version. See [[file:release.org][Releases]] for a
    list of certain milestones of this branch.
  - *devel*: potantially unstable active development branch
    for ongoing code merges
    
* Installation

This project is partitioned into sub-packages to facilitate
minimal dependency in downstream projects. Each sub-package
corresponds to a distinct (but inter-dependent) python
package. Created packages are:

- syedra-core
- syedra-vision
- syedra-control

These packages can be installed from pypi by running the
following command:

#+begin_src sh
pip install syedra-core [syedra-vision syedra-control]
#+end_src

Alternatively, you can install directly from the github repository
using the following command:

#+begin_src sh
pip install git+https://github.com/haldunk/syedra.git#subdirectory=syedra-core
pip install git+https://github.com/haldunk/syedra.git#subdirectory=syedra-vision
pip install git+https://github.com/haldunk/syedra.git#subdirectory=syedra-control
#+end_src

To install a specific tagged version or a branch use the following
syntax:

#+begin_src sh
pip install git+https://github.com/haldunk/syedra@<tag|branch>#subdirectory=syedra-core
pip install git+https://github.com/haldunk/syedra@<tag|branch>#subdirectory=syedra-vision
pip install git+https://github.com/haldunk/syedra@<tag|branch>#subdirectory=syedra-control
#+end_src

* Quick Start

*syedra* architecture simplifies the construction of
information processing system. Its abstraction model and
various syntax features produces compact description.

[[file:docs/block.org][Block]] is a process wrapper abstraction providing a
standardized informational input/output interface. A
typical Block class exposes input and output ports and an
update method that defines the operation to be executed.

#+begin_src python
from syedra.core.block import *

class Incrementor(Block):
  block_name = 'Incrementor'

  x = InputPort()
  y = OutputPort()

  def update(self):
    self.y = self.x + 1
#+end_src

While a Block instance cen be used stand-alone it does not
offer much value in that way. Block architecture's real
advantage emerges from the construction of [[file:docs/block.org::Block Pipeline][data processing
pipelines]] by combining multiple block instances in a
network.

#+begin_src python
import random

class Generator(Block):
  block_name = 'Generator'

  y = OutputPort(initial=0)

  def update(self):
    self.y = random.randint(0, 10)


class Printer(Block):
  block_name = 'Printer'

  x = InputPort()

  def update(self):
    print(f"x = {self.x}")

generator = Generator()
printer = Printer()

generator['y'] >> printer['x']
#+end_src

[[file:docs/block.py::Execution of Blocks][Execution of a block pipeline]] is initiated by selecting one
or more initial blocks to start the execution. An internal
token passing mechanism executes the update methods of
blocks in accordance with the [[file:docs/block.py::Block Readiness][readiness]] of each block in
the pipeline.

#+begin_src python
Block.execute(generator)
#+end_src

The pipeline execution is performed in cycles. In each
cycle all *ready* blocks are executed. At the end of the
cycle all block instances in the pipeline with fully
updated input ports are collected as the blocks to be
executed in the next cycle and the process restarts. If
there is no ready block at the end of a cycle the pipeline
processing terminates.

The flexibility of the architecture permits construction of
a wide veriety of pipelines. For instance, the above
example is a one shot pipeline, i.e. it terminates when the
value is printed by the =printer= block instance. However,
one can also imagine building a pipeline with feedback
connection that cindefinitely self triggers itself and
produces a periodic execution sequence.

#+begin_src python
class TriggeredGenerator(Block):
  block_name = 'Triggered Generator'

  trigger = InputPort()
  y = OutputPort()

  def update(self):
    self.y = random.randint()

generator = TriggeredGenerator()
printer = Printer()

generator['y'] >> printer['x']
generator['y'] >> generator['trigger']

Block.execute(generator)
#+end_src

For a detailed documentation see [[file:docs/index.org][docs folder]]. For
illustrative examples of various ways to use the
architecture see [[file:tutorials/index.org][tutorials folder]].

* Examples

To run the tutorial scripts in this repository you need to
enter into the virtual environment and setup the python
path.

#+begin_src sh
source venv/bin/activate
source path.sh
#+end_src

Then, any tutorial in the sub-package folders can be
executed.

#+begin_src sh
cd syedra-core
python -m tutorial.block.process
#+end_src

* Documentation

the documentation organization mirrors that of the [[Packages][sub
packages]]. More detailed information on each collection
can be found in the associated documentation file linked
below.

- [[file:syedra-core/docs/index.org][core]] : fundamental building blocks of the framework
- [[file:syedra-control/docs/index.org][control]] : control system implementation components
- [[file:syedra-vision/docs/index.org][vision]] : vision procession implementation components

* Packages

- [[file:docs/core.org][core]]
- [[file:docs/vision.org][vision]]
- [[file:docs/control.org][control]]

* Folders

The project folder consists of the following subfolders:

- [[file:syedra/][syedra/]] : syedra package sources
- [[file:tutorials/][tutorials/]] : tutorials on how to use the package
- [[file:docs/][docs/]] : package documentation
- [[file:tests/][tests/]] : unit tests for the package
  
* Developer
** Source Conventions

- [[https://peps.python.org/pep-0008/][Python style guide]] is the foundation of coding
  conventions. Unless otherwise explicitly stated it should
  be followed.
- The python source uses tab indentation of 2 spaces.
- All source must use [[https://docs.python.org/3/library/typing.html][type hints]].
- Inline comments must be kept at a minimum. Code itself
  must be legible and ideally require no inline comments.

** Virtual Environment

Development of the sub-packages is performed in a suitable
virtual environment setting. Each sub-package has a
tailored virtual environment. For convenience the following
make target is provided in each sub-package to setup the
required virtual environment.

#+begin_src
make venv
#+end_src

To switch to the virtual environment simply source the
activate script.

#+begin_src
source venv/bin/activate
#+end_src

** Running Tutorial Scripts

Since the project is partitioned into sub-packages that has
dependency among themselves the execution of the tutorial
scripts require the setting up the PYTHONPATH propertly.

A convenience script is provided at the top folder. After
entering into the virtual environment sourcing this file
will setup python so that all sub-packages can be accessed
by tutorial scripts.

#+begin_src
source path.sh
#+end_src

