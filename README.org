#+title: syedra: A System Design Framework
#+author: Haldun Komsuoglu

*syedra* framework is a tool kit to implement control and
data processing systems. It is named after the ancient city
of [[https://syedra.org][Syedra]] located in Alanya, Turkey whose city plan of
concentric circles climbing up a hill top resembles a
heirachy of abstraction layers.

See [[Documentation][Documentation]] for more details on the code use.

See [[file:release.org][Releases]] for a full list of tagged stable versions.

* Branches

  - *main*: most recent stable version. See [[file:release.org][Releases]] for a
    list of certain milestones of this branch.
  - *devel*: potantially unstable active development branch
    for ongoing code merges
    
* Installation

This project is partitioned into sub-packages to facilitate
minimal dependency in downstream projects. Each sub-package
corresponds to a distinct (but inter-dependent) python
package. Created packages are:

  - syedra-core
  - syedra-vision
  - syedra-control

** From Source

The python packages can be install locally from
source. After cloning the repository build the package and
simply run the install make target.

#+begin_src sh
git clone https://github.com/haldunk/syedra.git
cd syedra
make venv-setup
make build
make install
#+end_src
  
** From PyPI

These packages can be installed from pypi by running the
following command:

#+begin_src sh
pip install syedra-core [syedra-vision syedra-control]
#+end_src

** From GitHub

Alternatively, you can install directly from the github repository
using the following command:

#+begin_src sh
pip install git+https://github.com/haldunk/syedra.git#subdirectory=syedra-core
pip install git+https://github.com/haldunk/syedra.git#subdirectory=syedra-vision
pip install git+https://github.com/haldunk/syedra.git#subdirectory=syedra-control
#+end_src

To install a specific tagged version or a branch use the following
syntax:

#+begin_src sh
pip install git+https://github.com/haldunk/syedra.git@<tag|branch>#subdirectory=syedra-core
pip install git+https://github.com/haldunk/syedra.git@<tag|branch>#subdirectory=syedra-vision
pip install git+https://github.com/haldunk/syedra.git@<tag|branch>#subdirectory=syedra-control
#+end_src

* Quick Start

*syedra* architecture simplifies the construction of
information processing system. Its abstraction model and
various syntax features produces compact description.

[[file:docs/block.org][Block]] is a process wrapper abstraction providing a
standardized informational input/output interface. A
typical Block class exposes input and output ports and an
update method that defines the operation to be executed.

#+begin_src python
from syedra.core.block import *

class Incrementor(Block):
  block_name = 'Incrementor'

  x = InputPort()
  y = OutputPort()

  def update(self):
    self.y = self.x + 1
#+end_src

While a Block instance cen be used stand-alone it does not
offer much value in that way. Block architecture's real
advantage emerges from the construction of [[file:docs/block.org::Block Pipeline][data processing
pipelines]] by combining multiple block instances in a
network.

#+begin_src python
import random

class Generator(Block):
  block_name = 'Generator'

  y = OutputPort(initial=0)

  def update(self):
    self.y = random.randint(0, 10)


class Printer(Block):
  block_name = 'Printer'

  x = InputPort()

  def update(self):
    print(f"x = {self.x}")

generator = Generator()
printer = Printer()

generator['y'] >> printer['x']
#+end_src

[[file:docs/block.py::Execution of Blocks][Execution of a block pipeline]] is initiated by selecting one
or more initial blocks to start the execution. An internal
token passing mechanism executes the update methods of
blocks in accordance with the [[file:docs/block.py::Block Readiness][readiness]] of each block in
the pipeline.

#+begin_src python
Block.execute(generator)
#+end_src

The pipeline execution is performed in cycles. In each
cycle all *ready* blocks are executed. At the end of the
cycle all block instances in the pipeline with fully
updated input ports are collected as the blocks to be
executed in the next cycle and the process restarts. If
there is no ready block at the end of a cycle the pipeline
processing terminates.

The flexibility of the architecture permits construction of
a wide veriety of pipelines. For instance, the above
example is a one shot pipeline, i.e. it terminates when the
value is printed by the =printer= block instance. However,
one can also imagine building a pipeline with feedback
connection that cindefinitely self triggers itself and
produces a periodic execution sequence.

#+begin_src python
class TriggeredGenerator(Block):
  block_name = 'Triggered Generator'

  trigger = InputPort()
  y = OutputPort()

  def update(self):
    self.y = random.randint()

generator = TriggeredGenerator()
printer = Printer()

generator['y'] >> printer['x']
generator['y'] >> generator['trigger']

Block.execute(generator)
#+end_src

For a detailed documentation see [[file:docs/index.org][docs folder]]. For
illustrative examples of various ways to use the
architecture see [[file:tutorials/index.org][tutorials folder]].

* Sub Packages

The syedra package is organized into a collection of
subpackages to facilitate fine grained control over the
dependencies and to reduce code base.  More detailed
information on each subpackage can be found in the
associated documentation file linked below.

  - [[file:syedra-core/index.org][core]]    : fundamental building blocks of the framework
  - [[file:syedra-vision/index.org][vision]]  : vision procession implementation components
  - [[file:syedra-control/index.org][control]] : control system implementation components
  
* Tutorials

To run the tutorial scripts in this repository you need to
enter into the virtual environment and setup the python
path.

#+begin_src sh
source venv/bin/activate
source path.sh
#+end_src

Then, any tutorial in the sub-package folders can be
executed.

#+begin_src sh
cd syedra-core
python -m tutorials.block.periodic
#+end_src

* Developer
** Source Conventions

- [[https://peps.python.org/pep-0008/][Python style guide]] is the foundation of coding
  conventions. Unless otherwise explicitly stated it should
  be followed.
- The python source uses tab indentation of 2 spaces.
- All source must use [[https://docs.python.org/3/library/typing.html][type hints]].
- Inline comments must be kept at a minimum. Code itself
  must be legible and ideally require no inline comments.


* Releases
** 0.0.0
  - First fielded version
  - core
    - Implements block pipeline infrastructure
    - Implements finite-state machine insfrastructure
  - vision
    - Implements OpenCV camera block
    - Implements OpenCV image display block
    - Implements OpenCV keyboard event handler block
    - Implements OpenCV image transformation blocks
      - crop
      - color model conversion
    - Implements OpenCV detection blocks
      - color based masking
      - blob detection
  - control
    - Implements scalar PID control block
