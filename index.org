#+TITLE: Syedra: A Systems Design Framework
#+AUTHOR: Haldun Komsuoglu

*syedra* framework is a tool kit to implement control and
data processing systems. It is named after the ancient city
of [[https://syedra.org][Syedra]] located in Alanya, Turkey whose city plan of
concentric circles climbing up a hill top resembles a
heirachy of abstraction layers.

* Quick Start

*syedra* architecture simplifies the construction of
information processing system. Its abstraction model and
various syntax features produces compact description.

[[file:docs/block.org][Block]] is a process wrapper abstraction providing a
standardized informational input/output interface. A
typical Block class exposes input and output ports and an
update method that defines the operation to be executed.

#+BEGIN_SRC python
from syedra.core.block import *

class Incrementor(Block):
  block_name = 'Incrementor'

  x = InputPort()
  y = OutputPort()

  def update(self):
    self.y = self.x + 1
#+END_SRC

While a Block instance cen be used stand-alone it does not
offer much value in that way. Block architecture's real
advantage emerges from the construction of [[file:docs/block.org::Block Pipeline][data processing
pipelines]] by combining multiple block instances in a
network.

#+BEGIN_SRC python
import random

class Generator(Block):
  block_name = 'Generator'

  y = OutputPort(initial=0)

  def update(self):
    self.y = random.randint(0, 10)


class Printer(Block):
  block_name = 'Printer'

  x = InputPort()

  def update(self):
    print(f"x = {self.x}")

generator = Generator()
printer = Printer()

generator['y'] >> printer['x']
#+END_SRC

[[file:docs/block.py::Execution of Blocks][Execution of a block pipeline]] is initiated by selecting one
or more initial blocks to start the execution. An internal
token passing mechanism executes the update methods of
blocks in accordance with the [[file:docs/block.py::Block Readiness][readiness]] of each block in
the pipeline.

#+BEGIN_SRC python
Block.execute(generator)
#+END_SRC

The pipeline execution is performed in cycles. In each
cycle all *ready* blocks are executed. At the end of the
cycle all block instances in the pipeline with fully
updated input ports are collected as the blocks to be
executed in the next cycle and the process restarts. If
there is no ready block at the end of a cycle the pipeline
processing terminates.

The flexibility of the architecture permits construction of
a wide veriety of pipelines. For instance, the above
example is a one shot pipeline, i.e. it terminates when the
value is printed by the =printer= block instance. However,
one can also imagine building a pipeline with feedback
connection that cindefinitely self triggers itself and
produces a periodic execution sequence.

#+BEGIN_SRC python
class TriggeredGenerator(Block):
  block_name = 'Triggered Generator'

  trigger = InputPort()
  y = OutputPort()

  def update(self):
    self.y = random.randint()

generator = TriggeredGenerator()
printer = Printer()

generator['y'] >> printer['x']
generator['y'] >> generator['trigger']

Block.execute(generator)
#+END_SRC

For a detailed documentation see [[file:docs/index.org][docs folder]]. For
illustrative examples of various ways to use the
architecture see [[file:tutorials/index.org][tutorials folder]].

* Modules
- [[file:docs/core.org][core]]
  - [[file:docs/block.org][block]]
  - [[file:docs/fsm.org][fsm]]

* Developer
** Source Conventions

- [[https://peps.python.org/pep-0008/][Python style guide]] is the foundation of coding
  conventions. Unless otherwise explicitly stated it should
  be followed.
- The python source uses tab indentation of 2 spaces.
- All source must use [[https://docs.python.org/3/library/typing.html][type hints]].
- Inline comments must be kept at a minimum. Code itself
  must be legible and ideally require no inline comments.

** Virtual Environment

Development of the package is performed in a virtual
environment. For convenience the following make target is
provided to setup the required virtual environment.

#+BEGIN_SRC
make venv
#+END_SRC

To switch to the virtual environment simply source the
activate script.

#+BEGIN_SRC
source venv/bin/activate
#+END_SRC

* Branches
** main
This branch is where the stable implementation of the
repository is maintained.

** experimental
This branch, extended from the [[#main][main]] branch, is where new
concepts are tested.

* Tags

A three digit versioning system is employed:
- MAJOR: incremented when backward compatibility is lost
- MINOR: incremeneted when database schema is changed
- BUILD: incremented when all other changes made
  
** 0.0.0
