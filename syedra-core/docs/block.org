#+title: syedra Block Primitive Documentation
#+author: Haldun Komsuoglu

*Block* is a process container primitive with a well specified
input/output interface for data flow. To import Block and associated
classes use the following import.

* Importing

The primitive [[file:~/Projects/python/syedra/syedra/core/block.py::class Block(][Block]] class can be imported as follows. 

#+begin_src python
from syedra.core.block import Block
#+end_src

Generally, one would require the I/O functionality in
custom Block classes for which the port classes needed.

#+begin_src python
from syedra.core.block import InputPort, OutputPort
#+end_src

Alternatively, all typically needed classes can be imported
using the public names.

#+begin_src python
from syedra.core.block import *
#+end_src

* Block Definition
** Process Wrapper

Customized Block class definitions are farily flexible. In
its most basic form a Block can be setup as a wrapper for a
process. Overriding the =update()= method the process for
the custom Block can be defined (See
[[../tutorials/block/wrapper.py][tutorials/block/wrapper.py]]).

#+begin_src python
class Process(Block):
  block_name = 'Process'
  
  def update(self):
    print("Process: update()")
#+end_src

** Block I/O

[[file:../syedra/core/block.py::class Port(][Port]] class defines the standardized abstraction to
implement input/output interface for Block classes. 

*** Port Use

There are three access methods related to block ports.

**** Value Access

To read and write the value of a given port instance the
*dot-notation* is used. While port value read can be done
for all ports, write is only allowed for [[OutputPort]]. The
block ports are accessible from anywhere both from within
the block itself (such as the =update()= method) as well as
outside.

#+begin_src python
class Process(Block):
  x = InputPort()
  y = OutputPort()

process = Process()

print(f"x = {process.x}")

process.y = 1
print(f"y = {process.y}")
#+end_src

**** Value Assignment

Only *output* type port values can be assigned. Attempting
to assign the value of an input port will raise immutable
port value error. This constraint is global in that both
within the owner block object instance and externally port
value assignment obeys this constraint.

If a system design needs a certain input port to be
manupulated by an external source _manually_ this can be
achived by creating an intermediate block with appropriate
output ports that are bound to the input ports to be
assigned. Assigning values to this intermediate block and
starting the block execution from this intermediate block
will propapage the value to the target block input port.

#+begin_src python

class Dial(Block):
  block_name = 'Dial'
  value = OutputPort(initial=0.0)

class Target(Block):
  block_name = 'Target'
  value = InputPort(initial=0.0)

  def update(self):
    print(self.value)

dial = Dial()
target = Target()

dial['value'] >> target['value']

dial.value = 1.0
Block.execute(dial)
#+end_src

**** Port Binding

Binding two ports is achived using the item getter function
on the parent block (=[]=) and the right-shift (=>>=)
operator. Please, refer to the [[Block Pipeline]] for a
detailed discussion on the underlying mechanism.

#+begin_src python
generator['y'] >> printer['x']
#+end_src

**** Port Detachment

When a block port instance needs to be *detached* from its
existing connections the call notation on the parent block
(=()=) is used to get the associated [[file:../syedra/code/block.py::class Latch(][Latch]] on which the
=detach()= method is called. Please, refer to the [[Block
Pipeline]] for a detailed discussion on the underlying
mechanism.

#+begin_src python
printer('x').detach()
#+end_src

*** Port Types

[[file:../syedra/core/block.py::class Port(][Port]] is an I/O abstraction for defining connections between
Blocks to form a [[Block Pipeline][Block Pipeline]].

The base class [[file:../syedra/core/block.py::class Port(][Port]] is not meant to be used directly in
applications as it does not enforce data flow
direction.

Instead, there are three basic port classes provided for
application use. Note that these classes provide bare
minimum port abstraction functionality essentially defining
the direction of flow of information but does not provide
any type checking or other services. If such functionality
is needed the user needs to derive a child class.

- [[OutputPort]] : exposes an output from the Block
- [[InputPort]] : exposes an input to the Block
- [[ProxyPort]] : serves as a pass-thru in a layered Blocks 

**** OutputPort

A Block class can be setup to produce one or more
/output(s)/. Each output is exposed to the outside world
through an [[file:../syedra/core/block.py::class OutputPort(][OutputPort]]. (See [[file:../tutorials/block/source.py][tutorials/block/source.py]])

#+begin_src python
class Source(Block):
  block_name = 'Source'

  y = OutputPort(initial=0)
  
  def update(self):
    y = random.randint(0, 10)
#+end_src

**** InputPort

A Block class can be setup to accept one or more
/input(s)/.  Each input port are exposed to the outside
world though an [[file:../syedra/code/block.py::class InputPort(][InputPort]]. (See
[[file:../tutorials/block/sink.py][tutorials/block/source.py]])

#+begin_src python
class Sink(Block):
  block_name = 'Sink'

  x = InputPort(initial=0)

  def update(self):
    print(f"- x = {self.x}")
#+end_src

Note that in a typical setup you *cannot* use the standard
dot notation to set the value of an InputPort
instance. However, in cases where you have to set the
InputPort value on a block the following approach can be
used. But the user must note that the value of the
associated Node is being overwritten. This method must be
used sparingly.

#+begin_src python
sink['x'].value = 1
Block.execute(sink)
#+end_src

**** ProxyPort

A Block class can be setup as a container for a Block
Pipeline Subsystem. In such a setting the exposing the
subsystem ports to the outside world as an interface of the
superblock is accomplished by the [[file:../syedra/core/block.py::class ProxyPort(][ProxyPort]]. As the name
implies a ProxyPort is simply a pass-thru for the subsystem
port that is being exposed. Technically, it has the same
properties of an [[InputPort]] but it is not considered in the
block execution scheduling mechanism. (See
[[file:../tutorials/block/subsystem.py][tutorials/block/subsystem.py]])

#+begin_src python
class Generator(Block):
  block_name = 'Generator'

  y = OutputPort()
  
  def update(self):
    self.y = random.randint(0, 10)


class Printer(Block):
  block_name = 'Printer'

  x = InputPort()

  def update(self):
    print(f"x = {self.x}")


class Container(Block):
  block_name = 'Container'

  y = ProxyPort()

  def __init__(self):
    super().__init__()
    self.generator = Generator(superblock=self)
    self.printer = Printer()
    self.generator['y'] >> self.printer['x']
    self.generator['y'] >> self['y']
#+end_src

* Block Pipeline
** Connectivity

By definition, each block port instance is associated with
a [[file:../syedra/core/block.py::class Node(][Node]] instance, which serves as the node of the
informational graph. The node associated with a port
instance is accessed using the item getter (=[]=) on the
owner block instance.

* Execution of Blocks
** Block Readiness
Execution of a (network of) Block is initiated by the
=Block.execute()= static method which takes a list of Block
instances as the starting blocks for execution.

The execution may be started from a single Block instance.

    process = Process()
    Block.execute(process)

Or, multiple Block instances.

    process1 = Process()
    process2 = Process()
    Block.execute(process1, process2)

However, the real value of the Block architecture arises from its
ability to describe complex processing pipelines. Intra-Block
connection definitions require Ports. There are two fundamental Port
types: InputPort and OutputPort. The names imply the enforced
direction of the data flow from the Block's perspective.

One can define a Block that only has OutputPorts. These are *source*
blocks.

    class Source(Block):
      block_name = 'Source'

      y = OutputPort(initial=0)

      def update(self):
        self.y = random.randint(0, 10)
  
Similarly, a Block may have only InputPorts. These are *sink* blocks.

    class Sink(Block):
      block_name = 'Sink'

      x = InputPort(initial=0)

      def update(self):
        print(f"- x = {self.x}")

The Block execution is scheduled based on a *token passing
mechanism*. When a block is executed a token is passed to the
InputPort(s) that are connected to the OutputPort of the executed
Block. If all InputPort(s) of a Block instance has a token this Block
instance is marked as *ready to execute* and executed in the next
execution cycle. When there is no Block instance ready for execution
the execution concludes.
  
